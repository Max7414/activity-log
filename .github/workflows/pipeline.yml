name: CI/CD Deployment Pipeline

on:
  workflow_dispatch: # 手動觸發，純 pipeline
  # push:
  #   branches: [ master ]

permissions:
  contents: write # 建立/刪除 releases/tags 需要

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node: [18, 20]
    outputs:
      version: ${{ steps.ver.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (no cache)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Install deps (auto-detect)
        run: |
          corepack enable || true
          if [ -f pnpm-lock.yaml ]; then
            pnpm i --frozen-lockfile || pnpm i
          elif [ -f yarn.lock ]; then
            yarn install --frozen-lockfile || yarn install
          elif [ -f package.json ]; then
            if [ -f package-lock.json ]; then
              npm ci
            else
              npm install
            fi
          fi

      - name: Build
        run: |
          if [ -f package.json ]; then
            npm run -s build
          fi

      - name: Compute base version (for dynamic tags if needed)
        id: ver
        run: |
          VERSION="0.0.0"
          if [ -f package.json ]; then
            VERSION=$(node -p "require('./package.json').version || '0.0.0'")
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Package artifact
        run: |
          mkdir -p out
          zip -r out/build.zip . -x ".git/*"

      - name: Upload artifact (per-matrix)
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.node }}
          path: out/build.zip
          retention-days: 7

  test-unit:
    needs: build
    runs-on: ubuntu-latest
    env:
      TEST_ENV: unit
      FORCE_FAIL: 0
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          corepack enable || true
          if [ -f pnpm-lock.yaml ]; then
            pnpm i --frozen-lockfile || pnpm i
          elif [ -f yarn.lock ]; then
            yarn install --frozen-lockfile || yarn install
          elif [ -f package.json ]; then
            if [ -f package-lock.json ]; then
              npm ci
            else
              npm install
            fi
          fi

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          merge-multiple: true

      - name: Run unit tests
        run: npm run test:unit

  test-integration:
    needs: test-unit
    runs-on: ubuntu-latest
    env:
      TEST_ENV: staging
      FORCE_FAIL: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          corepack enable || true
          if [ -f pnpm-lock.yaml ]; then
            pnpm i --frozen-lockfile || pnpm i
          elif [ -f yarn.lock ]; then
            yarn install --frozen-lockfile || yarn install
          elif [ -f package.json ]; then
            if [ -f package-lock.json ]; then
              npm ci
            else
              npm install
            fi
          fi

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          merge-multiple: true

      - name: Run integration tests
        run: npm run test:integration

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-summary
          path: coverage
          retention-days: 7
          if-no-files-found: error

  coverage:
    needs: test-integration
    runs-on: ubuntu-latest
    outputs:
      coverage: ${{ steps.report.outputs.coverage }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          corepack enable || true
          if [ -f pnpm-lock.yaml ]; then
            pnpm i --frozen-lockfile || pnpm i
          elif [ -f yarn.lock ]; then
            yarn install --frozen-lockfile || yarn install
          elif [ -f package.json ]; then
            if [ -f package-lock.json ]; then
              npm ci
            else
              npm install
            fi
          fi

      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-summary
          path: coverage

      - name: Check coverage threshold
        env:
          MIN_COVERAGE: ${{ vars.MIN_COVERAGE || '85' }}
        run: npm run coverage:check

      - name: Record coverage output
        id: report
        run: |
          COVERAGE=$(node -e "const fs = require('fs'); const data = JSON.parse(fs.readFileSync('coverage/summary.json', 'utf8')); process.stdout.write(String(data.coverage || 0));")
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT

      - name: Upload coverage status
        uses: actions/upload-artifact@v4
        with:
          name: coverage-status
          path: coverage/status.txt
          retention-days: 7

  deploy-staging:
    needs:
      - build
      - coverage
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Download & Merge artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          merge-multiple: true

      - name: Select artifact (first one)
        run: |
          if [ -f build.zip ]; then
            mv build.zip staging_build.zip
          elif [ -f out/build.zip ]; then
            mv out/build.zip staging_build.zip
          else
            FILE=$(ls -1 **/build.zip | head -n1)
            cp "$FILE" staging_build.zip
          fi
          ls -al

      - name: Create or Update Staging Release (idempotent, prerelease)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          COVERAGE: ${{ needs.coverage.outputs.coverage }}
          TAG: ${{ vars.BUILD_TAG }}
          NOTE: ${{ vars.RELEASE_NOTE }}
          VERSION: ${{ needs.build.outputs.version || '0.0.0' }}
        run: |
          NOTES_FILE=notes.txt
          {
            echo "${NOTE}"
            echo ""
            echo "Build version: ${VERSION}"
            echo "Coverage: ${COVERAGE:-N/A}%"
          } > "$NOTES_FILE"
          if gh release view "$TAG" --repo "$REPO" > /dev/null 2>&1; then
            gh release upload "$TAG" staging_build.zip --clobber --repo "$REPO"
            gh release edit "$TAG" --notes-file "$NOTES_FILE" --prerelease --repo "$REPO"
          else
            gh release create "$TAG" staging_build.zip --notes-file "$NOTES_FILE" --prerelease --repo "$REPO"
          fi

  deploy-production:
    needs:
      - build
      - coverage
      - deploy-staging
    runs-on: ubuntu-latest
    environment: production # 這裡會卡 Required reviewers（請在 Environment 設定）
    steps:
      - name: Download & Merge artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          merge-multiple: true

      - name: Prepare artifact
        run: |
          if [ -f staging_build.zip ]; then
            mv staging_build.zip prod_build.zip
          elif [ -f build.zip ]; then
            mv build.zip prod_build.zip
          elif [ -f out/build.zip ]; then
            mv out/build.zip prod_build.zip
          else
            FILE=$(ls -1 **/build.zip | head -n1)
            cp "$FILE" prod_build.zip
          fi
          ls -al

      - name: Create or Update Production Release (idempotent, latest)
        id: rel
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          TAG: ${{ vars.BUILD_TAG }}
          NOTE: ${{ vars.RELEASE_NOTE }}
          COVERAGE: ${{ needs.coverage.outputs.coverage }}
          VERSION: ${{ needs.build.outputs.version || '0.0.0' }}
        run: |
          NOTES_FILE=notes.txt
          {
            echo "${NOTE}"
            echo ""
            echo "Build version: ${VERSION}"
            echo "Coverage: ${COVERAGE:-N/A}%"
          } > "$NOTES_FILE"
          if gh release view "$TAG" --repo "$REPO" > /dev/null 2>&1; then
            gh release upload "$TAG" prod_build.zip --clobber --repo "$REPO"
            gh release edit "$TAG" --notes-file "$NOTES_FILE" --latest --repo "$REPO"
          else
            gh release create "$TAG" prod_build.zip --notes-file "$NOTES_FILE" --latest --repo "$REPO"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Rollback on failure
        if: failure()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          TAG: ${{ steps.rel.outputs.tag || vars.BUILD_TAG }}
        run: |
          echo "Rolling back $TAG ..."
          gh release delete "$TAG" -y --repo "$REPO" || true
          git push "https://x-access-token:${GH_TOKEN}@github.com/${REPO}.git" ":refs/tags/$TAG" || true
