name: CI/CD Deployment Pipeline
on:
  workflow_dispatch:
  # 如需 push master 也觸發整條線，可加：
  # push:
  #   branches: [ master ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node: [18, 20]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (no cache)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      # ★ 執行本地 action（示範：跑一次即可）
      - name: Run local activity-log action
        if: matrix.node == 20
        uses: ./
        with:
          GITHUB_USERNAME: ${{ github.repository_owner }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          EVENT_LIMIT: 10
          OUTPUT_STYLE: MARKDOWN

      - name: Install deps (auto-detect)
        run: |
          corepack enable || true
          if [ -f pnpm-lock.yaml ]; then
            pnpm i --frozen-lockfile || pnpm i
          elif [ -f yarn.lock ]; then
            yarn install --frozen-lockfile || yarn install
          elif [ -f package.json ]; then
            if [ -f package-lock.json ]; then
              npm ci
            else
              npm install
            fi
          fi

      - name: Lint & Test (optional)
        continue-on-error: true
        run: |
          if [ -f package.json ]; then
            npm run -s lint || true
            npm test || true
          fi

      - name: Compute base version
        id: ver
        run: |
          VERSION="0.0.0"
          if [ -f package.json ]; then
            VERSION=$(node -p "require('./package.json').version || '0.0.0'")
          else
            :
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Package artifact
        run: |
          mkdir -p out
          zip -r out/build.zip . -x ".git/*"

      - name: Upload artifact (per-matrix)
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.node }}
          path: out/build.zip
          retention-days: 7

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Download & Merge artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          merge-multiple: true

      - name: Select artifact (first one)
        run: |
          if [ -f build.zip ]; then
            mv build.zip staging_build.zip
          elif [ -f out/build.zip ]; then
            mv out/build.zip staging_build.zip
          else
            FILE=$(ls -1 **/build.zip | head -n1)
            cp "$FILE" staging_build.zip
          fi
          ls -al

      - name: Create or Update Staging Release (idempotent, prerelease)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          BASE: ${{ needs.build.outputs.version || '0.0.0' }}
          TAG:  ${{ vars.BUILD_TAG }}       # Environment: staging → staging-v1.0 或 staging-${BASE}
          NOTE: ${{ vars.RELEASE_NOTE }}     # 例：Pre-production
        run: |
          if gh release view "$TAG" --repo "$REPO" > /dev/null 2>&1; then
            gh release upload "$TAG" staging_build.zip --clobber --repo "$REPO"
            gh release edit "$TAG" --notes "$NOTE" --prerelease --repo "$REPO"
          else
            gh release create "$TAG" staging_build.zip --notes "$NOTE" --prerelease --repo "$REPO"
          fi

      - name: Notify (Slack optional)
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}   # staging environment secret（可不設）
          TAG: ${{ vars.BUILD_TAG }}
        run: |
          if [ -n "$SLACK_WEBHOOK" ]; then
            curl -s -X POST -H 'Content-type: application/json' \
              --data "$(jq -nc --arg t "$TAG" --arg s "staging" '{text:"Deployed to \($s): \($t)"}')" \
              "$SLACK_WEBHOOK" || true
          fi

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production       # 這裡會卡 Required reviewers
    steps:
      - name: Download & Merge artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          merge-multiple: true

      - name: Prepare artifact
        run: |
          if [ -f staging_build.zip ]; then
            mv staging_build.zip prod_build.zip
          elif [ -f build.zip ]; then
            mv build.zip prod_build.zip
          elif [ -f out/build.zip ]; then
            mv out/build.zip prod_build.zip
          else
            FILE=$(ls -1 **/build.zip | head -n1)
            cp "$FILE" prod_build.zip
          fi
          ls -al

      - name: Create or Update Production Release (idempotent, latest)
        id: rel
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          TAG:  ${{ vars.BUILD_TAG }}       # Environment: production → prod-v1.0 或 prod-${BASE}
          NOTE: ${{ vars.RELEASE_NOTE }}     # 例：Production
        run: |
          if gh release view "$TAG" --repo "$REPO" > /dev/null 2>&1; then
            gh release upload "$TAG" prod_build.zip --clobber --repo "$REPO"
            gh release edit "$TAG" --notes "$NOTE" --latest --repo "$REPO"
          else
            gh release create "$TAG" prod_build.zip --notes "$NOTE" --latest --repo "$REPO"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Notify (Slack optional)
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}   # production environment secret（可不設）
          TAG: ${{ steps.rel.outputs.tag }}
        run: |
          if [ -n "$SLACK_WEBHOOK" ]; then
            curl -s -X POST -H 'Content-type: application/json' \
              --data "$(jq -nc --arg t "$TAG" '{text:"✅ Production released: \($t)"}')" \
              "$SLACK_WEBHOOK" || true
          fi

      - name: Rollback on failure
        if: failure()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          TAG: ${{ steps.rel.outputs.tag || vars.BUILD_TAG }}
        run: |
          echo "Rolling back $TAG ..."
          gh release delete "$TAG" -y --repo "$REPO" || true
          git push "https://x-access-token:${GH_TOKEN}@github.com/${REPO}.git" ":refs/tags/$TAG" || true
